import java.util.Arrays;
//algorithm for this sorting is --divide and then merge
//and from the code it divde is divided by the left one and the right one
//the time complexity for the merge sort is omega of (N*logN)
public class mergeSort {
    public static void main(String[] args) {
        int[] arr={5,4,7,6,1};
        arr=mergesort(arr);
        System.out.println(Arrays.toString(arr));


    }
    static int[] mergesort(int[] arr){
        if(arr.length ==1){
            return arr;
        }
        int mid=arr.length/2;
        int[] left=mergesort(Arrays.copyOfRange(arr,0,mid));//this Arrays.copyOfRange is used to crate the arr of desired condition of the previous one
        int [] right=mergesort(Arrays.copyOfRange(arr,mid,arr.length));


        return merge(left,right);
    }
    private static int[] merge(int[] first,int[] second){
        int i=0;
        int j=0;
        int k=0;
        int[] mix=new int[first.length+ second.length];
        while(i< first.length && j< second.length){
            if(first[i]<second[j]){
                    mix[k]=first[i];
                    i++;

            }else{
                mix[k]=second[j];
                j++;
            }
            k++;

        }
        //it may be possible that one of the length of the array is not completed the
        // will copy those remaining elemnts to the mix array
        while(i< first.length){
            mix[k]=first[i];
            i++;
            k++;

        }
        while(j< second.length){
            mix[k]=second[j];
            j++;
            k++;
        }
        return mix;

    }


}
