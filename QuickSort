import java.util.Arrays;

public class QuickSort {
    //algorithm for this type of sorting is
    //1.. we select the pivot element
    //2..we will try to shift the smaller element to the left side of the pivot element and greater to the right hand side
    //3..we will continue this process until we will reach our sorted array
    //Time complexity for this type of sorting are ---Best Case-(NLogN)
    // for the Average Case--o(Nlog N)
    // for the worst case it is o(n square)

    public static void main(String[] args) {
        int[] arr={2,5,6,4};
        quicksort(arr,0, arr.length-1);
        System.out.println(Arrays.toString(arr));


    }
    static void quicksort(int[] nums,int low,int high)
    {
        if(low>=high){
            return;
        }
        int s=low;
        int e=high;
        int m=s+(e-s)/2;
        int pivot=nums[m];
        while(s<=e){
            while(nums[s]<pivot){
                s++;
            }
            while(nums[e]>pivot){
                e--;
            }
            if(s<=e){
                int temp =nums[s];
                nums[s]=nums[e];
                nums[e]=temp;
                s++;
                e--;

            }
        }
        quicksort(nums, low, e);
        quicksort(nums,high,s);
    }
}
