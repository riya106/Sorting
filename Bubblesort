public class bubblesort {
    //time complexity is omega n square
    //if the array is sorted then the complexity is if omega of n only



//algorithm for the bubble sorting
    //1..we will use the adjacent swapping here for sorting the numbers
    //2..first we check the adjacent two numbers togther and check which one is greater and then swap it accordinge
    //3..then we wil find that the larget number is at the rightmost side
    //4..so last elemnst are kind of sort so we neend not to be there again agin
    static void bubblesort(int arr[],int n){
        for(int i=n-1;i>=0;i--){
            for(int j=0;j<=i-1;j++) {
                //here the loop will start from 0 to n-1;
                //then loop will cover 0 to n-2 just bcz last ements are turning to be sorted
                if (arr[j ] > arr[j+1]) {

                        int temp = arr[j];
                        arr[j] = arr[j + 1];
                        arr[j + 1] = temp;
                }
            }



        }
            System.out.println("sorted array");
            for(int k=0;k<n;k++){
                System.out.println(arr[k]+" ");
            }

            System.out.println();



    }

    public static void main(String[] args) {
        int[] arr={2,1,3,6,8,9,5};
        int n= arr.length;
        bubblesort(arr,n);

    }
}
